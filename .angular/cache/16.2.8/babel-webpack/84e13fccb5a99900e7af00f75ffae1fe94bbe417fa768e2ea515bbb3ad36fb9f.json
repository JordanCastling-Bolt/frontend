{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth/auth-service.service\";\nexport class PostsServiceService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.postsDisplay = [];\n    this.updatedPostsDisplay = new Subject();\n  }\n  getAuthHeaders() {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('Token is not available');\n    }\n    return new HttpHeaders({\n      'Authorization': 'Bearer ' + token\n    });\n  }\n  addPost_service(pid, pname) {\n    const headers = this.getAuthHeaders();\n    this.http.post('https://localhost:3000/api/posts', {\n      _id: pid,\n      id: pid,\n      name: pname\n    }, {\n      headers: headers\n    }).pipe(catchError(error => {\n      console.error('Error adding post:', error);\n      return throwError(error);\n    })).subscribe(response => {\n      this.postsDisplay.push(response.post);\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  getPost_service() {\n    const headers = this.getAuthHeaders();\n    this.http.get('https://localhost:3000/api/posts', {\n      headers: headers\n    }).pipe(catchError(error => {\n      console.error('Error fetching posts:', error);\n      return throwError(error);\n    })).subscribe(postResponse => {\n      this.postsDisplay = postResponse.posts;\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  deletePost_service(postId) {\n    const headers = this.getAuthHeaders();\n    this.http.delete('https://localhost:3000/api/posts/' + postId, {\n      headers: headers\n    }).pipe(catchError(error => {\n      console.error('Error deleting post:', error);\n      return throwError(error);\n    })).subscribe(() => {\n      const updatedPostsDeleted = this.postsDisplay.filter(post => post._id !== postId);\n      this.postsDisplay = updatedPostsDeleted;\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedPostsDisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostsServiceService_Factory(t) {\n    return new (t || PostsServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthServiceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsServiceService,\n    factory: PostsServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","Subject","throwError","catchError","PostsServiceService","constructor","http","authService","postsDisplay","updatedPostsDisplay","getAuthHeaders","token","getToken","Error","addPost_service","pid","pname","headers","post","_id","id","name","pipe","error","console","subscribe","response","push","next","getPost_service","get","postResponse","posts","deletePost_service","postId","delete","updatedPostsDeleted","filter","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","i2","AuthServiceService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jordan\\Documents\\GitHub\\frontend\\src\\app\\posts\\posts-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthServiceService } from '../auth/auth-service.service';\n\n@Injectable({ providedIn: 'root' })\nexport class PostsServiceService {\n\n  private postsDisplay: { _id: string; id: string; name: string; _v: string }[] = [];\n  private updatedPostsDisplay = new Subject<{ _id: string; id: string; name: string; _v: string }[]>();\n\n  constructor(private http: HttpClient, private authService: AuthServiceService) { }\n\n  getAuthHeaders(): HttpHeaders {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('Token is not available');\n    }\n    return new HttpHeaders({\n      'Authorization': 'Bearer ' + token\n    });\n  }\n\n  addPost_service(pid: string, pname: string) {\n    const headers = this.getAuthHeaders();\n    this.http.post<{ message: string; post: any }>('https://localhost:3000/api/posts', \n      { _id: pid, id: pid, name: pname }, { headers: headers })\n      .pipe(catchError(error => {\n        console.error('Error adding post:', error);\n        return throwError(error);\n      }))\n      .subscribe((response) => {\n        this.postsDisplay.push(response.post);\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  getPost_service() {\n    const headers = this.getAuthHeaders();\n    this.http.get<{ message: string; posts: any }>('https://localhost:3000/api/posts', { headers: headers })\n      .pipe(catchError(error => {\n        console.error('Error fetching posts:', error);\n        return throwError(error);\n      }))\n      .subscribe((postResponse) => {\n        this.postsDisplay = postResponse.posts;\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  deletePost_service(postId: string) {\n    const headers = this.getAuthHeaders();\n    this.http.delete('https://localhost:3000/api/posts/' + postId, { headers: headers })\n      .pipe(catchError(error => {\n        console.error('Error deleting post:', error);\n        return throwError(error);\n      }))\n      .subscribe(() => {\n        const updatedPostsDeleted = this.postsDisplay.filter(post => post._id !== postId);\n        this.postsDisplay = updatedPostsDeleted;\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  getUpdateListener() {\n    return this.updatedPostsDisplay.asObservable();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}