{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth/auth-service.service\";\nexport class PostsServiceService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.postsDisplay = [];\n    this.updatedPostsDisplay = new Subject();\n  }\n  getAuthHeaders() {\n    const token = this.authService.getToken();\n    if (!token) {\n      throw new Error('Token is not available');\n    }\n    return new HttpHeaders({\n      'Authorization': 'Bearer ' + token\n    });\n  }\n  addPost_service(postId, postTitle, postContent) {\n    const headers = this.getAuthHeaders();\n    const postData = {\n      id: postId,\n      title: postTitle,\n      post: postContent\n    };\n    this.http.post('https://localhost:3000/api/posts', postData, {\n      headers: headers\n    }).pipe(catchError(error => {\n      console.error('Error adding post:', error);\n      return throwError(() => error);\n    })).subscribe(response => {\n      this.postsDisplay.push(response.post);\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  getPost_service() {\n    const headers = this.getAuthHeaders();\n    this.http.get('https://localhost:3000/api/posts', {\n      headers: headers\n    }).pipe(catchError(error => {\n      console.error('Error fetching posts:', error);\n      return throwError(() => error);\n    })).subscribe(postResponse => {\n      this.postsDisplay = postResponse.posts;\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  deletePost_service(postId) {\n    const headers = this.getAuthHeaders();\n    this.http.delete('https://localhost:3000/api/posts/' + postId, {\n      headers: headers\n    }).pipe(catchError(error => {\n      console.error('Error deleting post:', error);\n      return throwError(() => error);\n    })).subscribe(() => {\n      const updatedPostsDeleted = this.postsDisplay.filter(post => post._id !== postId);\n      this.postsDisplay = updatedPostsDeleted;\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedPostsDisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostsServiceService_Factory(t) {\n    return new (t || PostsServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthServiceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsServiceService,\n    factory: PostsServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","Subject","throwError","catchError","PostsServiceService","constructor","http","authService","postsDisplay","updatedPostsDisplay","getAuthHeaders","token","getToken","Error","addPost_service","postId","postTitle","postContent","headers","postData","id","title","post","pipe","error","console","subscribe","response","push","next","getPost_service","get","postResponse","posts","deletePost_service","delete","updatedPostsDeleted","filter","_id","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","i2","AuthServiceService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jordan\\Documents\\GitHub\\frontend\\src\\app\\posts\\posts-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Subject, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { AuthServiceService } from '../auth/auth-service.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PostsServiceService {\r\n\r\n  private postsDisplay: { _id: string; id: string; name: string; _v: string }[] = [];\r\n  private updatedPostsDisplay = new Subject<{ _id: string; id: string; name: string; _v: string }[]>();\r\n\r\n  constructor(private http: HttpClient, private authService: AuthServiceService) { }\r\n\r\n  getAuthHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      throw new Error('Token is not available');\r\n    }\r\n    return new HttpHeaders({\r\n      'Authorization': 'Bearer ' + token\r\n    });\r\n  }\r\n\r\n  addPost_service(postId: string, postTitle: string, postContent: string) {\r\n    const headers = this.getAuthHeaders();\r\n    const postData = { id: postId, title: postTitle, post: postContent };\r\n    \r\n    this.http.post<{ message: string; post: any }>('https://localhost:3000/api/posts', postData, { headers: headers })\r\n      .pipe(catchError(error => {\r\n        console.error('Error adding post:', error);\r\n        return throwError(() => error);\r\n      }))\r\n      .subscribe((response) => {\r\n        this.postsDisplay.push(response.post);\r\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\r\n      });\r\n  }\r\n\r\n  getPost_service() {\r\n    const headers = this.getAuthHeaders();\r\n    this.http.get<{ message: string; posts: any }>('https://localhost:3000/api/posts', { headers: headers })\r\n      .pipe(catchError(error => {\r\n        console.error('Error fetching posts:', error);\r\n        return throwError(() => error);\r\n      }))\r\n      .subscribe((postResponse) => {\r\n        this.postsDisplay = postResponse.posts;\r\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\r\n      });\r\n  }\r\n\r\n  deletePost_service(postId: string) {\r\n    const headers = this.getAuthHeaders();\r\n    this.http.delete('https://localhost:3000/api/posts/' + postId, { headers: headers })\r\n      .pipe(catchError(error => {\r\n        console.error('Error deleting post:', error);\r\n        return throwError(() => error);\r\n      }))\r\n      .subscribe(() => {\r\n        const updatedPostsDeleted = this.postsDisplay.filter(post => post._id !== postId);\r\n        this.postsDisplay = updatedPostsDeleted;\r\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\r\n      });\r\n  }\r\n\r\n  getUpdateListener() {\r\n    return this.updatedPostsDisplay.asObservable();\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,OAAO,EAAEC,UAAU,QAAQ,MAAM;AAC1C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAI3C,OAAM,MAAOC,mBAAmB;EAK9BC,YAAoBC,IAAgB,EAAUC,WAA+B;IAAzD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAHjD,KAAAC,YAAY,GAA4D,EAAE;IAC1E,KAAAC,mBAAmB,GAAG,IAAIR,OAAO,EAA2D;EAEnB;EAEjFS,cAAcA,CAAA;IACZ,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzC,IAAI,CAACD,KAAK,EAAE;MACV,MAAM,IAAIE,KAAK,CAAC,wBAAwB,CAAC;;IAE3C,OAAO,IAAIb,WAAW,CAAC;MACrB,eAAe,EAAE,SAAS,GAAGW;KAC9B,CAAC;EACJ;EAEAG,eAAeA,CAACC,MAAc,EAAEC,SAAiB,EAAEC,WAAmB;IACpE,MAAMC,OAAO,GAAG,IAAI,CAACR,cAAc,EAAE;IACrC,MAAMS,QAAQ,GAAG;MAAEC,EAAE,EAAEL,MAAM;MAAEM,KAAK,EAAEL,SAAS;MAAEM,IAAI,EAAEL;IAAW,CAAE;IAEpE,IAAI,CAACX,IAAI,CAACgB,IAAI,CAAiC,kCAAkC,EAAEH,QAAQ,EAAE;MAAED,OAAO,EAAEA;IAAO,CAAE,CAAC,CAC/GK,IAAI,CAACpB,UAAU,CAACqB,KAAK,IAAG;MACvBC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,OAAOtB,UAAU,CAAC,MAAMsB,KAAK,CAAC;IAChC,CAAC,CAAC,CAAC,CACFE,SAAS,CAAEC,QAAQ,IAAI;MACtB,IAAI,CAACnB,YAAY,CAACoB,IAAI,CAACD,QAAQ,CAACL,IAAI,CAAC;MACrC,IAAI,CAACb,mBAAmB,CAACoB,IAAI,CAAC,CAAC,GAAG,IAAI,CAACrB,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEAsB,eAAeA,CAAA;IACb,MAAMZ,OAAO,GAAG,IAAI,CAACR,cAAc,EAAE;IACrC,IAAI,CAACJ,IAAI,CAACyB,GAAG,CAAkC,kCAAkC,EAAE;MAAEb,OAAO,EAAEA;IAAO,CAAE,CAAC,CACrGK,IAAI,CAACpB,UAAU,CAACqB,KAAK,IAAG;MACvBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAOtB,UAAU,CAAC,MAAMsB,KAAK,CAAC;IAChC,CAAC,CAAC,CAAC,CACFE,SAAS,CAAEM,YAAY,IAAI;MAC1B,IAAI,CAACxB,YAAY,GAAGwB,YAAY,CAACC,KAAK;MACtC,IAAI,CAACxB,mBAAmB,CAACoB,IAAI,CAAC,CAAC,GAAG,IAAI,CAACrB,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEA0B,kBAAkBA,CAACnB,MAAc;IAC/B,MAAMG,OAAO,GAAG,IAAI,CAACR,cAAc,EAAE;IACrC,IAAI,CAACJ,IAAI,CAAC6B,MAAM,CAAC,mCAAmC,GAAGpB,MAAM,EAAE;MAAEG,OAAO,EAAEA;IAAO,CAAE,CAAC,CACjFK,IAAI,CAACpB,UAAU,CAACqB,KAAK,IAAG;MACvBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAOtB,UAAU,CAAC,MAAMsB,KAAK,CAAC;IAChC,CAAC,CAAC,CAAC,CACFE,SAAS,CAAC,MAAK;MACd,MAAMU,mBAAmB,GAAG,IAAI,CAAC5B,YAAY,CAAC6B,MAAM,CAACf,IAAI,IAAIA,IAAI,CAACgB,GAAG,KAAKvB,MAAM,CAAC;MACjF,IAAI,CAACP,YAAY,GAAG4B,mBAAmB;MACvC,IAAI,CAAC3B,mBAAmB,CAACoB,IAAI,CAAC,CAAC,GAAG,IAAI,CAACrB,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEA+B,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAC9B,mBAAmB,CAAC+B,YAAY,EAAE;EAChD;EAAC,QAAAC,CAAA,G;qBA7DUrC,mBAAmB,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnB5C,mBAAmB;IAAA6C,OAAA,EAAnB7C,mBAAmB,CAAA8C,IAAA;IAAAC,UAAA,EADN;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}