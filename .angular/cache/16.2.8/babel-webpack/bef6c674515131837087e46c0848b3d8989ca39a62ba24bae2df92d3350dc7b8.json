{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth/auth-service.service\";\nexport class PostsServiceService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.postsDisplay = [];\n    this.updatedPostsDisplay = new Subject();\n  } // Inject AuthServiceService\n  getAuthHeaders() {\n    const token = this.authService.getToken();\n    return {\n      headers: new HttpHeaders({\n        'Authorization': 'Bearer ' + token\n      })\n    };\n  }\n  addPost_service(pid, pname) {\n    this.http.post('https://localhost:3000/api/posts', {\n      _id: pid,\n      id: pid,\n      name: pname\n    }, this.getAuthHeaders()).subscribe(response => {\n      this.postsDisplay.push(response.post);\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  getPost_service() {\n    this.http.get('https://localhost:3000/api/posts', this.getAuthHeaders()).subscribe(postResponse => {\n      this.postsDisplay = postResponse.posts;\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  deletePost_service(postId) {\n    this.http.delete('https://localhost:3000/api/posts/' + postId, this.getAuthHeaders()).subscribe(() => {\n      const updatedPostsDeleted = this.postsDisplay.filter(post => post._id !== postId);\n      this.postsDisplay = updatedPostsDeleted;\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedPostsDisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostsServiceService_Factory(t) {\n    return new (t || PostsServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthServiceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsServiceService,\n    factory: PostsServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","Subject","PostsServiceService","constructor","http","authService","postsDisplay","updatedPostsDisplay","getAuthHeaders","token","getToken","headers","addPost_service","pid","pname","post","_id","id","name","subscribe","response","push","next","getPost_service","get","postResponse","posts","deletePost_service","postId","delete","updatedPostsDeleted","filter","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","i2","AuthServiceService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jordan\\Documents\\GitHub\\frontend\\src\\app\\posts\\posts-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { AuthServiceService } from '../auth/auth-service.service'; // Import the AuthServiceService to get the token\n\n@Injectable({ providedIn: 'root' })\nexport class PostsServiceService {\n\n  private postsDisplay: { _id: string; id: string; name: string; _v: string }[] = [];\n  private updatedPostsDisplay = new Subject<{ _id: string; id: string; name: string; _v: string }[]>();\n\n  constructor(private http: HttpClient, private authService: AuthServiceService) { } // Inject AuthServiceService\n\n  private getAuthHeaders() {\n    const token = this.authService.getToken();\n    return {\n      headers: new HttpHeaders({\n        'Authorization': 'Bearer ' + token\n      })\n    };\n  }\n\n  addPost_service(pid: string, pname: string) {\n    this.http.post<{ message: string; post: any }>('https://localhost:3000/api/posts', \n      { _id: pid, id: pid, name: pname }, this.getAuthHeaders())\n      .subscribe((response) => {\n        this.postsDisplay.push(response.post);\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  getPost_service() {\n    this.http.get<{ message: string; posts: any }>('https://localhost:3000/api/posts', this.getAuthHeaders())\n      .subscribe((postResponse) => {\n        this.postsDisplay = postResponse.posts;\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  deletePost_service(postId: string) {\n    this.http.delete('https://localhost:3000/api/posts/' + postId, this.getAuthHeaders())\n      .subscribe(() => {\n        const updatedPostsDeleted = this.postsDisplay.filter(post => post._id !== postId);\n        this.postsDisplay = updatedPostsDeleted;\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  getUpdateListener() {\n    return this.updatedPostsDisplay.asObservable();\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,OAAO,QAAQ,MAAM;;;;AAI9B,OAAM,MAAOC,mBAAmB;EAK9BC,YAAoBC,IAAgB,EAAUC,WAA+B;IAAzD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAHjD,KAAAC,YAAY,GAA4D,EAAE;IAC1E,KAAAC,mBAAmB,GAAG,IAAIN,OAAO,EAA2D;EAEnB,CAAC,CAAC;EAE3EO,cAAcA,CAAA;IACpB,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzC,OAAO;MACLC,OAAO,EAAE,IAAIX,WAAW,CAAC;QACvB,eAAe,EAAE,SAAS,GAAGS;OAC9B;KACF;EACH;EAEAG,eAAeA,CAACC,GAAW,EAAEC,KAAa;IACxC,IAAI,CAACV,IAAI,CAACW,IAAI,CAAiC,kCAAkC,EAC/E;MAAEC,GAAG,EAAEH,GAAG;MAAEI,EAAE,EAAEJ,GAAG;MAAEK,IAAI,EAAEJ;IAAK,CAAE,EAAE,IAAI,CAACN,cAAc,EAAE,CAAC,CACzDW,SAAS,CAAEC,QAAQ,IAAI;MACtB,IAAI,CAACd,YAAY,CAACe,IAAI,CAACD,QAAQ,CAACL,IAAI,CAAC;MACrC,IAAI,CAACR,mBAAmB,CAACe,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEAiB,eAAeA,CAAA;IACb,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAkC,kCAAkC,EAAE,IAAI,CAAChB,cAAc,EAAE,CAAC,CACtGW,SAAS,CAAEM,YAAY,IAAI;MAC1B,IAAI,CAACnB,YAAY,GAAGmB,YAAY,CAACC,KAAK;MACtC,IAAI,CAACnB,mBAAmB,CAACe,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEAqB,kBAAkBA,CAACC,MAAc;IAC/B,IAAI,CAACxB,IAAI,CAACyB,MAAM,CAAC,mCAAmC,GAAGD,MAAM,EAAE,IAAI,CAACpB,cAAc,EAAE,CAAC,CAClFW,SAAS,CAAC,MAAK;MACd,MAAMW,mBAAmB,GAAG,IAAI,CAACxB,YAAY,CAACyB,MAAM,CAAChB,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKY,MAAM,CAAC;MACjF,IAAI,CAACtB,YAAY,GAAGwB,mBAAmB;MACvC,IAAI,CAACvB,mBAAmB,CAACe,IAAI,CAAC,CAAC,GAAG,IAAI,CAAChB,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEA0B,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACzB,mBAAmB,CAAC0B,YAAY,EAAE;EAChD;EAAC,QAAAC,CAAA,G;qBA5CUhC,mBAAmB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,kBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBvC,mBAAmB;IAAAwC,OAAA,EAAnBxC,mBAAmB,CAAAyC,IAAA;IAAAC,UAAA,EADN;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}