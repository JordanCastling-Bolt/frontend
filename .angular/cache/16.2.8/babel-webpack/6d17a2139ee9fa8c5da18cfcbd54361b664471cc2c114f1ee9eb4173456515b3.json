{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PostsServiceService {\n  constructor(http) {\n    this.http = http;\n    this.postsDisplay = [];\n    this.updatedPostsDisplay = new Subject();\n  }\n  addPost_service(pid, pname) {\n    this.http.post('https://localhost:3000/api/posts', {\n      _id: pid,\n      id: pid,\n      name: pname\n    }).subscribe(response => {\n      this.postsDisplay.push(response.post);\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  getPost_service() {\n    this.http.get('https://localhost:3000/api/posts').subscribe(postResponse => {\n      this.postsDisplay = postResponse.posts;\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  deletePost_service(postId) {\n    this.http.delete('https://localhost:3000/api/posts/' + postId).subscribe(() => {\n      const updatedPostsDeleted = this.postsDisplay.filter(post => post._id !== postId);\n      this.postsDisplay = updatedPostsDeleted;\n      this.updatedPostsDisplay.next([...this.postsDisplay]);\n    });\n  }\n  getUpdateListener() {\n    return this.updatedPostsDisplay.asObservable();\n  }\n  static #_ = this.ɵfac = function PostsServiceService_Factory(t) {\n    return new (t || PostsServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsServiceService,\n    factory: PostsServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Subject","PostsServiceService","constructor","http","postsDisplay","updatedPostsDisplay","addPost_service","pid","pname","post","_id","id","name","subscribe","response","push","next","getPost_service","get","postResponse","posts","deletePost_service","postId","delete","updatedPostsDeleted","filter","getUpdateListener","asObservable","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Jordan\\Documents\\GitHub\\frontend\\src\\app\\posts\\posts-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class PostsServiceService {\n\n  private postsDisplay: { _id: string; id: string; name: string; _v: string }[] = [];\n  private updatedPostsDisplay = new Subject<{ _id: string; id: string; name: string; _v: string }[]>();\n\n  constructor(private http: HttpClient) { }\n\n  addPost_service(pid: string, pname: string) {\n    this.http.post<{ message: string; post: any }>('https://localhost:3000/api/posts', { _id: pid, id: pid, name: pname })\n      .subscribe((response) => {\n        this.postsDisplay.push(response.post);\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  getPost_service() {\n    this.http.get<{ message: string; posts: any }>('https://localhost:3000/api/posts')\n      .subscribe((postResponse) => {\n        this.postsDisplay = postResponse.posts;\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  deletePost_service(postId: string) {\n    this.http.delete('https://localhost:3000/api/posts/' + postId)\n      .subscribe(() => {\n        const updatedPostsDeleted = this.postsDisplay.filter(post => post._id !== postId);\n        this.postsDisplay = updatedPostsDeleted;\n        this.updatedPostsDisplay.next([...this.postsDisplay]);\n      });\n  }\n\n  getUpdateListener() {\n    return this.updatedPostsDisplay.asObservable();\n  }\n}\n"],"mappings":"AAEA,SAASA,OAAO,QAAQ,MAAM;;;AAG9B,OAAM,MAAOC,mBAAmB;EAK9BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,YAAY,GAA4D,EAAE;IAC1E,KAAAC,mBAAmB,GAAG,IAAIL,OAAO,EAA2D;EAE5D;EAExCM,eAAeA,CAACC,GAAW,EAAEC,KAAa;IACxC,IAAI,CAACL,IAAI,CAACM,IAAI,CAAiC,kCAAkC,EAAE;MAAEC,GAAG,EAAEH,GAAG;MAAEI,EAAE,EAAEJ,GAAG;MAAEK,IAAI,EAAEJ;IAAK,CAAE,CAAC,CACnHK,SAAS,CAAEC,QAAQ,IAAI;MACtB,IAAI,CAACV,YAAY,CAACW,IAAI,CAACD,QAAQ,CAACL,IAAI,CAAC;MACrC,IAAI,CAACJ,mBAAmB,CAACW,IAAI,CAAC,CAAC,GAAG,IAAI,CAACZ,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEAa,eAAeA,CAAA;IACb,IAAI,CAACd,IAAI,CAACe,GAAG,CAAkC,kCAAkC,CAAC,CAC/EL,SAAS,CAAEM,YAAY,IAAI;MAC1B,IAAI,CAACf,YAAY,GAAGe,YAAY,CAACC,KAAK;MACtC,IAAI,CAACf,mBAAmB,CAACW,IAAI,CAAC,CAAC,GAAG,IAAI,CAACZ,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEAiB,kBAAkBA,CAACC,MAAc;IAC/B,IAAI,CAACnB,IAAI,CAACoB,MAAM,CAAC,mCAAmC,GAAGD,MAAM,CAAC,CAC3DT,SAAS,CAAC,MAAK;MACd,MAAMW,mBAAmB,GAAG,IAAI,CAACpB,YAAY,CAACqB,MAAM,CAAChB,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKY,MAAM,CAAC;MACjF,IAAI,CAAClB,YAAY,GAAGoB,mBAAmB;MACvC,IAAI,CAACnB,mBAAmB,CAACW,IAAI,CAAC,CAAC,GAAG,IAAI,CAACZ,YAAY,CAAC,CAAC;IACvD,CAAC,CAAC;EACN;EAEAsB,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACrB,mBAAmB,CAACsB,YAAY,EAAE;EAChD;EAAC,QAAAC,CAAA,G;qBAlCU3B,mBAAmB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAnBhC,mBAAmB;IAAAiC,OAAA,EAAnBjC,mBAAmB,CAAAkC,IAAA;IAAAC,UAAA,EADN;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}